# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""This is the python module for communicating with omnis"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _omnis
else:
    import _omnis

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def cdata(ptr, nelements=1):
    return _omnis.cdata(ptr, nelements)

def memmove(data, indata):
    return _omnis.memmove(data, indata)
MSGBOX_OK = _omnis.MSGBOX_OK

MSGBOX_YESNO = _omnis.MSGBOX_YESNO

MSGBOX_NOYES = _omnis.MSGBOX_NOYES

MSGBOXICON_OK = _omnis.MSGBOXICON_OK

MSGBOXICON_YESNO = _omnis.MSGBOXICON_YESNO

MSGBOXICON_NOYES = _omnis.MSGBOXICON_NOYES

MSGBOXCANCEL_YESNO = _omnis.MSGBOXCANCEL_YESNO

MSGBOXCANCEL_NOYES = _omnis.MSGBOXCANCEL_NOYES


def messageBox(type, bell, message):
    r"""messageBox(int type, bool bell, std::string const & message) -> bool"""
    return _omnis.messageBox(type, bell, message)

def addTraceLine(message):
    r"""addTraceLine(std::string const & message)"""
    return _omnis.addTraceLine(message)
class Value(object):
    r"""Proxy of C++ Value class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    empty = property(_omnis.Value_empty_get, _omnis.Value_empty_set, doc=r"""empty : r.Value""")

    def __init__(self, *args):
        r"""
        __init__(Value self) -> Value
        __init__(Value self, std::string const & val) -> Value
        __init__(Value self, long val) -> Value
        __init__(Value self, double val) -> Value
        """
        _omnis.Value_swiginit(self, _omnis.new_Value(*args))
    __swig_destroy__ = _omnis.delete_Value

    def setChar(self, val):
        r"""setChar(Value self, std::string const & val)"""
        return _omnis.Value_setChar(self, val)

    def getChar(self):
        r"""getChar(Value self) -> std::string"""
        return _omnis.Value_getChar(self)

    def setBool(self, value):
        r"""setBool(Value self, bool value)"""
        return _omnis.Value_setBool(self, value)

    def getBool(self):
        r"""getBool(Value self) -> bool"""
        return _omnis.Value_getBool(self)

    def setLong(self, val):
        r"""setLong(Value self, long val)"""
        return _omnis.Value_setLong(self, val)

    def getLong(self):
        r"""getLong(Value self) -> long"""
        return _omnis.Value_getLong(self)

    def setNumber(self, val):
        r"""setNumber(Value self, double val)"""
        return _omnis.Value_setNumber(self, val)

    def getNumber(self):
        r"""getNumber(Value self) -> double"""
        return _omnis.Value_getNumber(self)

    def getBinaryLen(self):
        r"""getBinaryLen(Value self) -> long"""
        return _omnis.Value_getBinaryLen(self)

    def getBinary(self):
        r"""getBinary(Value self)"""
        return _omnis.Value_getBinary(self)

    def setBinary(self, indata, inlen):
        r"""setBinary(Value self, void const * indata, int inlen)"""
        return _omnis.Value_setBinary(self, indata, inlen)

    def setRow(self, columns):
        r"""setRow(Value self, long columns)"""
        return _omnis.Value_setRow(self, columns)

    def setList(self, rows, columns):
        r"""setList(Value self, long rows, long columns)"""
        return _omnis.Value_setList(self, rows, columns)

    def getRowCount(self):
        r"""getRowCount(Value self) -> long"""
        return _omnis.Value_getRowCount(self)

    def getColumnCount(self):
        r"""getColumnCount(Value self) -> long"""
        return _omnis.Value_getColumnCount(self)

    def setElement(self, row, column, value):
        r"""setElement(Value self, long row, long column, Value value)"""
        return _omnis.Value_setElement(self, row, column, value)

    def getElement(self, row, column, value):
        r"""getElement(Value self, long row, long column, Value value)"""
        return _omnis.Value_getElement(self, row, column, value)

    def isEmpty(self):
        r"""isEmpty(Value self) -> bool"""
        return _omnis.Value_isEmpty(self)

    def isNull(self):
        r"""isNull(Value self) -> bool"""
        return _omnis.Value_isNull(self)

    def setString(self, val):
        r"""setString(Value self, std::string const & val)"""
        return _omnis.Value_setString(self, val)

    def getString(self):
        r"""getString(Value self) -> std::string"""
        return _omnis.Value_getString(self)

    def setDouble(self, val):
        r"""setDouble(Value self, double val)"""
        return _omnis.Value_setDouble(self, val)

    def getDouble(self):
        r"""getDouble(Value self) -> double"""
        return _omnis.Value_getDouble(self)

    def doMethod(self, *args):
        r"""doMethod(Value self, std::string const & methodname, Value p1=empty, Value p2=empty, Value p3=empty, Value p4=empty, Value p5=empty, Value p6=empty, Value p7=empty, Value p8=empty, Value p9=empty, Value p10=empty) -> short"""
        return _omnis.Value_doMethod(self, *args)

# Register Value in _omnis:
_omnis.Value_swigregister(Value)
cvar = _omnis.cvar

class Variable(Value):
    r"""Proxy of C++ Variable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Variable self) -> Variable
        __init__(Variable self, std::string const & varname, bool willAlter=False) -> Variable
        """
        _omnis.Variable_swiginit(self, _omnis.new_Variable(*args))
    __swig_destroy__ = _omnis.delete_Variable

# Register Variable in _omnis:
_omnis.Variable_swigregister(Variable)

class Calculation(Value):
    r"""Proxy of C++ Calculation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Calculation self) -> Calculation
        __init__(Calculation self, std::string const & calculation) -> Calculation
        """
        _omnis.Calculation_swiginit(self, _omnis.new_Calculation(*args))
    __swig_destroy__ = _omnis.delete_Calculation

    def evaluate(self, result):
        r"""evaluate(Calculation self, Value result)"""
        return _omnis.Calculation_evaluate(self, result)

# Register Calculation in _omnis:
_omnis.Calculation_swigregister(Calculation)



class OmnisOutputRedirect:
    def __init__(self):
        self.data = ''
    def write(self, stuff):
        self.data = stuff 
        addTraceLine( self.data )

import sys
sys.stdout = OmnisOutputRedirect()
sys.stderr = OmnisOutputRedirect()




