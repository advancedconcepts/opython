# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

"""
This is the python module for communicating with omnis
"""

import _omnis
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


cdata = _omnis.cdata
memmove = _omnis.memmove
MSGBOX_OK = _omnis.MSGBOX_OK
MSGBOX_YESNO = _omnis.MSGBOX_YESNO
MSGBOX_NOYES = _omnis.MSGBOX_NOYES
MSGBOXICON_OK = _omnis.MSGBOXICON_OK
MSGBOXICON_YESNO = _omnis.MSGBOXICON_YESNO
MSGBOXICON_NOYES = _omnis.MSGBOXICON_NOYES
MSGBOXCANCEL_YESNO = _omnis.MSGBOXCANCEL_YESNO
MSGBOXCANCEL_NOYES = _omnis.MSGBOXCANCEL_NOYES

def messageBox(*args):
  """messageBox(int type, bool bell, string message) -> bool"""
  return _omnis.messageBox(*args)

def addTraceLine(*args):
  """addTraceLine(string message)"""
  return _omnis.addTraceLine(*args)
class Value(_object):
    """Proxy of C++ Value class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Value, name)
    __repr__ = _swig_repr
    __swig_setmethods__["empty"] = _omnis.Value_empty_set
    __swig_getmethods__["empty"] = _omnis.Value_empty_get
    if _newclass:empty = _swig_property(_omnis.Value_empty_get, _omnis.Value_empty_set)
    def __init__(self, *args): 
        """
        __init__(self) -> Value
        __init__(self, string val) -> Value
        __init__(self, long val) -> Value
        __init__(self, double val) -> Value
        """
        this = _omnis.new_Value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _omnis.delete_Value
    __del__ = lambda self : None;
    def setChar(*args):
        """setChar(self, string val)"""
        return _omnis.Value_setChar(*args)

    def getChar(*args):
        """getChar(self) -> string"""
        return _omnis.Value_getChar(*args)

    def setBool(*args):
        """setBool(self, bool value)"""
        return _omnis.Value_setBool(*args)

    def getBool(*args):
        """getBool(self) -> bool"""
        return _omnis.Value_getBool(*args)

    def setLong(*args):
        """setLong(self, long val)"""
        return _omnis.Value_setLong(*args)

    def getLong(*args):
        """getLong(self) -> long"""
        return _omnis.Value_getLong(*args)

    def setNumber(*args):
        """setNumber(self, double val)"""
        return _omnis.Value_setNumber(*args)

    def getNumber(*args):
        """getNumber(self) -> double"""
        return _omnis.Value_getNumber(*args)

    def getBinaryLen(*args):
        """getBinaryLen(self) -> long"""
        return _omnis.Value_getBinaryLen(*args)

    def getBinary(*args):
        """getBinary(self, char s)"""
        return _omnis.Value_getBinary(*args)

    def setBinary(*args):
        """setBinary(self, void indata)"""
        return _omnis.Value_setBinary(*args)

    def setRow(*args):
        """setRow(self, long columns)"""
        return _omnis.Value_setRow(*args)

    def setList(*args):
        """setList(self, long rows, long columns)"""
        return _omnis.Value_setList(*args)

    def getRowCount(*args):
        """getRowCount(self) -> long"""
        return _omnis.Value_getRowCount(*args)

    def getColumnCount(*args):
        """getColumnCount(self) -> long"""
        return _omnis.Value_getColumnCount(*args)

    def setElement(*args):
        """setElement(self, long row, long column, Value value)"""
        return _omnis.Value_setElement(*args)

    def getElement(*args):
        """getElement(self, long row, long column, Value value)"""
        return _omnis.Value_getElement(*args)

    def isEmpty(*args):
        """isEmpty(self) -> bool"""
        return _omnis.Value_isEmpty(*args)

    def isNull(*args):
        """isNull(self) -> bool"""
        return _omnis.Value_isNull(*args)

    def setString(*args):
        """setString(self, string val)"""
        return _omnis.Value_setString(*args)

    def getString(*args):
        """getString(self) -> string"""
        return _omnis.Value_getString(*args)

    def setDouble(*args):
        """setDouble(self, double val)"""
        return _omnis.Value_setDouble(*args)

    def getDouble(*args):
        """getDouble(self) -> double"""
        return _omnis.Value_getDouble(*args)

    def doMethod(*args):
        """
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty, Value p5=empty, 
            Value p6=empty, Value p7=empty, Value p8=empty, 
            Value p9=empty, Value p10=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty, Value p5=empty, 
            Value p6=empty, Value p7=empty, Value p8=empty, 
            Value p9=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty, Value p5=empty, 
            Value p6=empty, Value p7=empty, Value p8=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty, Value p5=empty, 
            Value p6=empty, Value p7=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty, Value p5=empty, 
            Value p6=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty, Value p5=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty, Value p4=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty, 
            Value p3=empty) -> short
        doMethod(self, string methodname, Value p1=empty, Value p2=empty) -> short
        doMethod(self, string methodname, Value p1=empty) -> short
        doMethod(self, string methodname) -> short
        """
        return _omnis.Value_doMethod(*args)

Value_swigregister = _omnis.Value_swigregister
Value_swigregister(Value)
cvar = _omnis.cvar

class Variable(Value):
    """Proxy of C++ Variable class"""
    __swig_setmethods__ = {}
    for _s in [Value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    for _s in [Value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Variable
        __init__(self, string varname, bool willAlter=False) -> Variable
        __init__(self, string varname) -> Variable
        """
        this = _omnis.new_Variable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _omnis.delete_Variable
    __del__ = lambda self : None;
Variable_swigregister = _omnis.Variable_swigregister
Variable_swigregister(Variable)

class Calculation(Value):
    """Proxy of C++ Calculation class"""
    __swig_setmethods__ = {}
    for _s in [Value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calculation, name, value)
    __swig_getmethods__ = {}
    for _s in [Value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Calculation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Calculation
        __init__(self, string calculation) -> Calculation
        """
        this = _omnis.new_Calculation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _omnis.delete_Calculation
    __del__ = lambda self : None;
    def evaluate(*args):
        """evaluate(self, Value result)"""
        return _omnis.Calculation_evaluate(*args)

Calculation_swigregister = _omnis.Calculation_swigregister
Calculation_swigregister(Calculation)

class OmnisOutputRedirect:
    def __init__(self):
        self.data = ''
    def write(self, stuff):
        self.data = stuff 
        addTraceLine( self.data )

import sys
sys.stdout = OmnisOutputRedirect()
sys.stderr = OmnisOutputRedirect()




